#? stdtmpl() | standard
#
#import std/[options, enumerate, sets]
#
#import ../../../api
#import ../../../helpers
#
#proc generate*(
#    def: ClassDefinition): string =
#  let selfModule = def.moduleName().safeImport()
#  let selfModuleExport = def.moduleName().safeIdent()
#  let selfType = def.name
#
#  result = autogenDisclaimer()
#  result &= "# Builtin Class " & def.name & " (Procs)\n"
import ./types/$selfModule
export $selfModuleExport
#  if def.inherits.isSome():
#    let parentName = def.inherits.unsafeGet()
#    let parentModuleName = parentName.moduleName().safeImport()
#    let parentModuleNameExport = parentName.moduleName().safeIdent()

import ../classes/$parentModuleName
export $parentModuleNameExport
#  end if
#  if def.name == "Thread":

type Thread = thread.Thread
#  end if

import ../gdffi

#  result &= def.renderImportList(
#    {roProperties, roMethods, roStructFields, roConstructors, roIndexes, roOperators},
#     "nodot/classes", def.inherits)
#
#  if def.constants.isSome:
#    result &= "# Constants\n"
#
#    for constant in def.constants.unsafeGet():
#      let constName = constant.name.safeIdent()
#      let constVal = constant.value
#
const $constName*: int = $constVal
#    end for

#  end if
#
#  let ctorName = def.name.deriveCtorName()
#
#  if def.is_instantiable and not def.is_singleton:
#    result &= "# Constructor\n"
#
#  if def.is_refcounted and def.is_instantiable:
proc $ctorName*(): Ref[$selfType]
#  elif def.is_instantiable:
proc $ctorName*(): $selfType
#  end if
  {.gd_class_ctor.}

#  elif def.is_singleton:
proc $ctorName*(): $selfType
  {.gd_class_singleton.}

#  end if
#  if def.methods.isSome:
#    result &= "# Methods\n"
#
#    for meth in def.methods.unsafeGet():
#      let methPrototype = meth.render(def)
#
#      if meth.is_virtual:
$methPrototype {.base.} = discard
#      else:
$methPrototype
#        if meth.return_value.isSome() and meth.return_value.unsafeGet().`type`.isClassType:
  {.gd_class_method_obj($meth.hash).}
#        else:
  {.gd_class_method($meth.hash).}
#        end if
#      end if

#    #{.gd_builtin_method($def.name, $meth.hash).}
#
#    end for
#  end if
#
#  # Properties seem infeasible to auto generate for now.
#  if false and def.properties.isSome:
#    result &= "# Properties\n"
#
#    for property in def.properties.unsafeGet():
#      if def.definesMethod(property.getter):
#        let getterProto = def.renderGetter(property)
$getterProto = discard
#      end if
#      if def.definesMethod(property.setter):
#        let setterProto = def.renderSetter(property)
$setterProto = discard
#      end if

#    end for
#  end if