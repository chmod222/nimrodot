#? stdtmpl() | standard
#
#import std/[options, tables, strutils, algorithm]
#
#import ../../../api
#import ../../../helpers
#
#proc generate*(
#    def: ClassDefinition): string =
#  result = autogenDisclaimer()
#
import ../../builtins/types/stringname
import ../../helpers
import ../../ffi
#  if def.isRefcounted:
import ../../ref_helper
#  end if

#  if def.inherits.isSome():
#    let parentName = def.inherits.unsafeGet()
#    let parentModule = parentName.toLower().safeImport()
#
#    # We do need ../types/$module here because for some reason, ./"object" is refused.
import ../types/$parentModule

type
  ${def.name}* = ptr object of ${parentName}
#  else:
type
  ${def.name}* = ptr object of RootObj
    opaque*: pointer
#  end if

var instanceBindingCallbacks* = default(GDExtensionInstanceBindingCallbacks)
var className: StringName = toGodotStringName("$def.name")

proc gdInstanceBindingCallbacks*(_: typedesc[$def.name]): ptr GDExtensionInstanceBindingCallbacks =
  addr instanceBindingCallbacks

proc gdClassName*(_: typedesc[$def.name]): ptr StringName = addr className

instanceBindingCallbacks = makeInstanceFunctions($def.name)
#  for enu in def.enums.get(@[]):
#    if not enu.name.startsWith("Variant."):
#      var duplicates = initOrderedTable[int, seq[EnumValue]]()
#      var lastValue = none int
#

type
#      let enumName = enu.name
  $enumName* {.size: sizeof(cint).} = enum
#      for value in enu.values.sortedByIt(it.value):
#        if lastValue.isSome() and lastValue.unsafeGet() == value.value:
#          if value.value notin duplicates:
#            duplicates[value.value] = @[value]
#          else:
#            duplicates[value.value] &= value
#          end if
#        else:
#          lastValue = some value.value
#
#          let cleanName = value.cleanName(enu)
    $cleanName = $value.value
#        end if
#      end for
#      if len(duplicates) > 0:

#        for value, dupes in pairs(duplicates):
#          for duplicate in dupes:
#            let cleanDupe = duplicate.cleanName(enu)
const $cleanDupe*: $enumName = $enumName($value)
#          end for
#        end for
#      end if
#    end if
#  end for
#  if def.isRefcounted:

#    var parent = apiDef.classTypes[def.inherits.unsafeGet]
#
#    while parent.isRefCounted:
converter to$parent.name*(x: sink Ref[$def.name]): Ref[$parent.name] = x.castRef($parent.name)
#      parent = apiDef.classTypes[parent.inherits.unsafeGet]
#    end while
#  end if